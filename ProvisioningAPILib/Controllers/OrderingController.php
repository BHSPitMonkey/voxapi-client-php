<?php
/*
 * ProvisioningAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/06/2015
 */

class OrderingController {

    /* private fields for configuration */

    /**
     * The username to use with basic authentication
     * @var string
     */
    private $basicAuthUserName;

    /**
     * The password to use with basic authentication
     * @var string
     */
    private $basicAuthPassword;

    /**
     * Constructor with authentication and configuration parameters
     */
    function __construct($basicAuthUserName, $basicAuthPassword)
    {
        $this->basicAuthUserName = $basicAuthUserName;
        $this->basicAuthPassword = $basicAuthPassword;
    }

    /**
     * The accountBalance method is used to retrieve information about your account balance.
     * @return mixed response from the API call*/
    public function getAccountBalance ()
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/ordering/accountbalance';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }

    /**
     * cancelDids is a method that allows you to cancel one or multiple DIDs.
     * @param   array $didIds    Required parameter: Array of identifier of the dids to cancel from order
     * @return mixed response from the API call*/
    public function createCancelDids (
                $didIds)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/ordering/cancel';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Content-type' => 'application/json; charset=utf-8'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, json_encode($didIds), Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
    
    /**
     * createCart is a method that allows you to create a specific cart to add Items to.
     * @param   string|null $customerReference    Optional parameter: This is the customer reference you wish to add to the cart.
     * @param   string|null $description    Optional parameter: This is the description you wish to add to the cart.
     * @return mixed response from the API call*/
    public function createCart (
                $customerReference, $description)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/ordering/cart/';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json',
            'Content-Type' => 'application/json'
        );

        //prepare body
        $body = json_encode(array("customerReference" => $customerReference, "description" => $description));

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, $body, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();


        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;

    }

    /**
     * listCart is a method that allows you to list your carts and retrieve their attributes (cartIdentifier, customerReference, description), and their content (list of products - orderProducts - that are currently in the cart).
     * @param   string $pageNumber    Required parameter: The page number, starting at 0.
     * @param   string $pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param   string|null $cartIdentifier    Optional parameter: Unique identifier for your cart. Please see the 'Create cart' or 'List cart' operations operations for more information.
     * @param   string|null $reference    Optional parameter: The reference that was given upon the cart creation.
     * @return mixed response from the API call*/
    public function listCart (
                $pageNumber,
                $pageSize,
                $cartIdentifier = NULL,
                $reference = NULL)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/ordering/cart';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'pageNumber' => $pageNumber,
            'pageSize' => $pageSize,
            'cartIdentifier' => $cartIdentifier,
            'reference' => $reference,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }

    /**
     * listOrder is a method that allows you to get a list of your orders (after a cart has been checked out) and their status.
     * @param   string $pageNumber    Required parameter: The page number, starting at 0.
     * @param   string $pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param   string|null $reference    Optional parameter: The order reference.
     * @param   string|null $status    Optional parameter: The status of the order.
     * @param   string|null $dateFrom    Optional parameter: When set, the system will search for orders placed after this date.
     * @param   string|null $dateTo    Optional parameter: When set, the system will search for orders placed before this date.
     * @return mixed response from the API call*/
    public function listOrder (
                $pageNumber,
                $pageSize,
                $reference = NULL,
                $status = NULL,
                $dateFrom = NULL,
                $dateTo = NULL)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/ordering/order';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'pageNumber' => $pageNumber,
            'pageSize' => $pageSize,
            'reference' => $reference,
            'status' => $status,
            'dateFrom' => $dateFrom,
            'dateTo' => $dateTo,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }

    /**
     * deleteCart is a method that allows you to delete a cart and all its content from your list of carts.
     * @param   string $cartIdentifier    Required parameter: The identifier of the cart.
     * @return mixed response from the API call*/
    public function deleteCart (
                $cartIdentifier)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/ordering/cart/{cartIdentifier}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'cartIdentifier' => $cartIdentifier,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }

    /**
     * checkoutCart is a method that allows you to checkout a cart and place an order for all the products contained in the cart. You can then retrieve your orders using the listOrder method.
     * @param   string $cartIdentifier    Required parameter: The identifier of the cart.
     * @return mixed response from the API call*/
    public function getCheckoutCart (
                $cartIdentifier)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/ordering/cart/{cartIdentifier}/checkout';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'cartIdentifier' => $cartIdentifier,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }

    /**
     * addToCart is a method that allows you to add items (orderProducts) to a specific cart before checking out the cart. Different product types (DID, CAPACITY or CREDIT_PACKAGE) can be added into one single cart.
     * @param   string $cartIdentifier    Required parameter: The identifier of the cart.
     * @return mixed response from the API call*/
    public function addToCart (
                $cartIdentifier)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/ordering/cart/{cartIdentifier}/product';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'cartIdentifier' => $cartIdentifier,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }

    /**
     * Remove a product from your cart, or change the ordered quantity.
     * @param   string $cartIdentifier    Required parameter: The identifier of the cart.
     * @param   string $orderProductId    Required parameter: The identifier of the product.
     * @return mixed response from the API call*/
    public function createRemoveFromCart (
                $cartIdentifier,
                $orderProductId)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/ordering/cart/{cartIdentifier}/product/{orderProductId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'cartIdentifier' => $cartIdentifier,
            'orderProductId' => $orderProductId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }

}
