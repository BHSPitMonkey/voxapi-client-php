<?php
/*
 * ProvisioningAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/06/2015
 */

class ConfigurationController {

    /* private fields for configuration */

    /**
     * The username to use with basic authentication 
     * @var string
     */
    private $basicAuthUserName;

    /**
     * The password to use with basic authentication 
     * @var string
     */
    private $basicAuthPassword;

    /**
     * Constructor with authentication and configuration parameters
     */
    function __construct($basicAuthUserName, $basicAuthPassword)
    {
        $this->basicAuthUserName = $basicAuthUserName;
        $this->basicAuthPassword = $basicAuthPassword;
    }

    /**
     * The applyConfiguration method is used to configure one or multiple DIDs with certain settings. The possible settings that can be configured for each DID are described below in the list of input parameters.
     * @param   string $didIds    Required parameter: This is the list of DIDs (IDs) to be configured. Returned in checkoutCart() and listDid().
     * @return mixed response from the API call*/
    public function createApplyConfiguration (
                $didIds) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/configuration';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, $didIds, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * listFaxUri is a method that allows you to get the list of your Fax URIs and their details.
     * @param   string $pageNumber    Required parameter: The page number, starting at 0.
     * @param   string $pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param   string|null $faxUriId    Optional parameter: The identifier of the fax uri.
     * @param   string|null $deliveryMethod    Optional parameter: The delivery method used for this fax uri.
     * @param   string|null $faxFileFormat    Optional parameter: The file format used for this fax uri.
     * @param   string|null $uri    Optional parameter: The actual uri where the fax should be delivered. Please note that by default the system will try to find an exact match.If you would like to search for part of the uri, you can use the '%' character as a wildcard.
     * @param   string|null $csid    Optional parameter: The called station id. Please note that by default the system will try to find an exact match.If you would like to search for part of the uri, you can use the '%' character as a wildcard.
     * @return mixed response from the API call*/
    public function listFaxUri (
                $pageNumber,
                $pageSize,
                $faxUriId = NULL,
                $deliveryMethod = NULL,
                $faxFileFormat = NULL,
                $uri = NULL,
                $csid = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/faxuri';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'pageNumber' => $pageNumber,
            'pageSize' => $pageSize,
            'faxUriId' => $faxUriId,
            'deliveryMethod' => $deliveryMethod,
            'faxFileFormat' => $faxFileFormat,
            'uri' => $uri,
            'csid' => $csid,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * listPop is a method that allows you to get the list of Voxboneâ€™s POPs (Points Of Presence) and their corresponding IP addresses.
     * @return mixed response from the API call*/
    public function listPop () 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/pop';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * listSmsLink is a method that allows you to retrieve the list of your SMS link groups.
     * @param   string|null $smsLinkId    Optional parameter: The identifier of the sms link.
     * @param   string|null $groupId    Optional parameter: The identifier of the sms link group.
     * @param   string|null $type    Optional parameter: The protocol of the sms link.
     * @param   string|null $direction    Optional parameter: The direction of the sms link.
     * @return mixed response from the API call*/
    public function listSmsLink (
                $smsLinkId = NULL,
                $groupId = NULL,
                $type = NULL,
                $direction = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/smslink';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'smsLinkId' => $smsLinkId,
            'groupId' => $groupId,
            'type' => $type,
            'direction' => $direction,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * saveSmsLinkGroup is a method that allows you to create an SMS link group. An SMS link group is an entity that contains one or several links. For SMS traffic coming from Voxbone to one of your DIDs, you need to link the DID to the link group so that the traffic can be routed to the appropriate destination. If several links are contained in the link group, the traffic will be load balanced according to the weight parameter defined in the links definition.
     * @param   string|null $name    Optional parameter: This is the name of the link group that you wish to create. There is no specific limitations except that the name should contain less than 255 characters.
     * @return mixed response from the API call*/
    public function updateSaveSmsLinkGroup (
                $name = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/smslinkgroup';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, $name, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * listVoiceUri is a method that allows you to get the list of your Voice URIs and their details.
     * @param   string $pageNumber    Required parameter: The page number, starting at 0.
     * @param   string $pageSize    Required parameter: The page size (max number of entities that are displayed in the response).
     * @param   string|null $voiceUriId    Optional parameter: The identifier of the voice uri.
     * @param   string|null $backupUriId    Optional parameter: The identifier of the voice uri acting as backup.
     * @param   string|null $voiceUriProtocol    Optional parameter: The protocol to use with this voice uri.
     * @param   string|null $uri    Optional parameter: The actual uri where the call will be delivered.
     * @param   string|null $description    Optional parameter: A human-readable description of this uri.
     * @return mixed response from the API call*/
    public function listVoiceUri (
                $pageNumber,
                $pageSize,
                $voiceUriId = NULL,
                $backupUriId = NULL,
                $voiceUriProtocol = NULL,
                $uri = NULL,
                $description = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/voiceuri';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'pageNumber' => $pageNumber,
            'pageSize' => $pageSize,
            'voiceUriId' => $voiceUriId,
            'backupUriId' => $backupUriId,
            'voiceUriProtocol' => $voiceUriProtocol,
            'uri' => $uri,
            'description' => $description,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0',
            'Accept' => 'application/json'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * Allows you to remove one of your capacity groups.
     * @param   string $capacityGroupId    Required parameter: The identifier of the capacity group.
     * @return void response from the API call*/
    public function deleteCapacityGroupId (
                $capacityGroupId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/capacitygroup/{capacityGroupId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'capacityGroupId' => $capacityGroupId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * deleteFaxUri is a method that allows you to remove one of your Fax URIs.
     * @param   string $faxUriId    Required parameter: The identifier of the fax uri.
     * @return void response from the API call*/
    public function deleteFaxUri (
                $faxUriId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/faxuri/{faxUriId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'faxUriId' => $faxUriId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * deleteSmsLink is a method that allows you to delete an SMS link.
     * @param   string $smsLinkId    Required parameter: The identifier of the sms link.
     * @return void response from the API call*/
    public function deleteSmsLink (
                $smsLinkId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/smslink/{smsLinkId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'smsLinkId' => $smsLinkId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * deleteSmsLinkGroup is a method that allows you to delete an SMS link group.
     * @param   string $smsLinkGroupId    Required parameter: The smsLinkGroupId to be deleted
     * @return void response from the API call*/
    public function deleteSmsLinkGroup (
                $smsLinkGroupId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/smslinkgroup/{smsLinkGroupId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'smsLinkGroupId' => $smsLinkGroupId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
    /**
     * deleteVoiceUri is a method that allows you to remove one of your voice URIs.
     * @param   string $voiceUriId    Required parameter: The identifier of the voice uri.
     * @return void response from the API call*/
    public function deleteVoiceUri (
                $voiceUriId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/services/rest/configuration/voiceuri/{voiceUriId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'voiceUriId' => $voiceUriId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'User-Agent' => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers, NULL, Configuration::$BasicAuthUserName, Configuration::$BasicAuthPassword);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }
    }
        
}